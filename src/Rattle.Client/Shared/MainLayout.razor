@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="page">
    <div class="sidebar">
        <div class="top-row ps-3 navbar navbar-dark d-flex justify-content-between align-items-center">
            <div class="container-fluid d-flex justify-content-between align-items-center">
                <a class="navbar-brand" href="">Rattle.Client</a>
                <div class="d-flex align-items-center">
                    <button title="Navigation menu" class="navbar-toggler me-2" @onclick="ToggleNav">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    @if (isUserAuthenticated)
                    {
                        <button class="btn btn-danger" @onclick="Logout">Logout</button>
                    }
                    else
                    {
                        <NavLink class="btn btn-primary" href="login">Login</NavLink>
                    }
                </div>
            </div>
        </div>
        <div class="@NavCssClass nav-scrollable" @onclick="ToggleNav">
            <nav class="nav flex-column">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">Home</NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="counter">Counter</NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="weather">Weather</NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="auction">Live Auction</NavLink>
                </div>
            </nav>
        </div>
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool _isNavCollapsed = true;
    private string? NavCssClass => _isNavCollapsed ? "collapse" : null;
    private bool isUserAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isUserAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(async () => await CheckAuthenticationState());
    }

    private void ToggleNav()
    {
        _isNavCollapsed = !_isNavCollapsed;
    }

    private async Task Logout()
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you would like to log out?");
        if (confirmed)
        {
            if (AuthenticationStateProvider is CustomAuthStateProvider customAuthStateProvider)
            {
                await customAuthStateProvider.MarkUserAsLoggedOut();
            }
            Navigation.NavigateTo("/");
        }
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
