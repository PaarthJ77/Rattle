@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Register</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="username">Username:</label>
        <InputText id="username" name="username" @bind-Value="registerModel.Username" />
    </div>

    <div>
        <label for="email">Email:</label>
        <InputText id="email" name="email" type="email" @bind-Value="registerModel.Email" />
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText id="password" name="password" type="password" @bind-Value="registerModel.Password" />
    </div>

    <div>
        <label for="confirmPassword">Confirm Password:</label>
        <InputText id="confirmPassword" name="confirmPassword" type="password" @bind-Value="registerModel.ConfirmPassword" />
    </div>

    <button type="submit">Register</button>
</EditForm>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task HandleRegister()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;

        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/users/register", new RegisterRequest
            {
                Username = registerModel.Username,
                Email = registerModel.Email,
                Password = registerModel.Password
            });

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Registration successful. You can now log in.";
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class RegisterModel
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    public class RegisterRequest
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
