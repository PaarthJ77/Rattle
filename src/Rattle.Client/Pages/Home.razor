@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<h1>Welcome to Rattle Auction</h1>

@if (isUserAuthenticated)
{
    <p>You are logged in as @username!</p>
    <button class="btn btn-danger" @onclick="Logout">Logout</button>
}
else
{
    <button class="btn btn-primary" @onclick="NavigateToLogin">Login</button>
}

@code {
    private bool isUserAuthenticated = false;
    private string username = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isUserAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        username = authState.User.Identity?.Name ?? string.Empty;
        StateHasChanged(); // Refresh UI
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(async () => await CheckAuthenticationState());
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private async Task Logout()
    {
        if (AuthenticationStateProvider is CustomAuthStateProvider customAuthStateProvider)
        {
            await customAuthStateProvider.MarkUserAsLoggedOut();
        }
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
